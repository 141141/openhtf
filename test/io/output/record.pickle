ccopy_reg
_reconstructor
p1
(copenhtf.io.test_record
TestRecord
p2
c__builtin__
object
p3
NtRp4
(dp5
S'phases'
p6
(lp7
g1
(copenhtf.io.test_record
PhaseRecord
p8
g3
NtRp9
(dp10
S'start_time_millis'
p11
I1469742449617
sS'attachments'
p12
(dp13
sS'measurements'
p14
(dp15
S'widget_type'
p16
g1
(copenhtf.util.measurements
Measurement
p17
g3
NtRp18
(dp19
S'name'
p20
g16
sS'docstring'
p21
S'This measurement tracks the type of widgets.'
p22
sS'_notification_cb'
p23
NsS'validators'
p24
(lp25
g1
(copenhtf.util.validators
RegexMatcher
p26
g3
NtRp27
(dp28
S'regex'
p29
S'.*Widget$'
p30
sS'_compiled'
p31
cre
_compile
p32
(g30
I0
tRp33
sbasS'units'
p34
NsS'outcome'
p35
copenhtf.util.measurements
Outcome
p36
(I1
tRp37
sS'measured_value'
p38
g1
(copenhtf.util.measurements
MeasuredValue
p39
g3
NtRp40
(dp41
S'is_value_set'
p42
I01
sg20
g16
sS'stored_value'
p43
S'TestWidget'
p44
sbsS'dimensions'
p45
NsbsS'widget_color'
p46
g1
(g17
g3
NtRp47
(dp48
g20
g46
sg21
S'Color of the widget'
p49
sg23
Nsg24
(lp50
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp51
(dp52
g42
I01
sg20
g46
sg43
S'Black'
p53
sbsg45
NsbsS'unset_meas'
p54
g1
(g17
g3
NtRp55
(dp56
g20
g54
sg21
Nsg23
Nsg24
(lp57
sg34
Nsg35
g36
(I3
tRp58
sg38
g1
(g39
g3
NtRp59
(dp60
g42
I00
sg20
g54
sg43
Nsbsg45
NsbsS'widget_size'
p61
g1
(g17
g3
NtRp62
(dp63
g20
g61
sg21
Nsg23
Nsg24
(lp64
g1
(copenhtf.util.validators
InRange
p65
g3
NtRp66
(dp67
S'minimum'
p68
I1
sS'maximum'
p69
I4
sbasg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp70
(dp71
g42
I01
sg20
g61
sg43
I3
sbsg45
NsbssS'end_time_millis'
p72
I1469742452689
sS'result'
p73
g1
(copenhtf.exe.phase_executor
PhaseOutcome
p74
c__builtin__
tuple
p75
(copenhtf
PhaseResult
p76
(I1
tRp77
ttRp78
sS'codeinfo'
p79
g1
(copenhtf.io.test_record
CodeInfo
p80
g3
NtRp81
(dp82
g21
S'A hello world test phase.'
p83
sg20
S'hello_world'
p84
sS'sourcecode'
p85
S'@measures(\n    Measurement(\'unset_meas\'),\n    Measurement(\n        \'widget_type\').MatchesRegex(r\'.*Widget$\').Doc(\n            \'\'\'This measurement tracks the type of widgets.\'\'\'),\n    Measurement(\n        \'widget_color\').Doc(\'Color of the widget\'),\n    Measurement(\'widget_size\').InRange(1, 4))\n@plug(example=example_plug.ExamplePlug)\ndef hello_world(test, example):\n  """A hello world test phase."""\n  test.logger.info(\'Hello World!\')\n  test.measurements.widget_type = prompts.DisplayPrompt(\n      \'What\\\'s the widget type?\', text_input=True)\n  if test.measurements.widget_type == \'raise\':\n    raise Exception()\n  test.measurements.widget_color = \'Black\'\n  test.measurements.widget_size = 3\n  test.logger.info(\'Plug value: %s\', example.Increment())\n'
p86
sbsg20
g84
sbag1
(g8
g3
NtRp87
(dp88
g11
I1469742452691
sg12
(dp89
sg14
(dp90
S'monitor_measurement'
p91
g1
(g17
g3
NtRp92
(dp93
g20
g91
sg21
Nsg23
Nsg24
(lp94
sg34
g1
(copenhtf.util.units
UnitDescriptor
p95
g75
(S'No dimension'
p96
S'NDL'
p97
NttRp98
sg35
g37
sg38
g1
(copenhtf.util.measurements
DimensionedMeasuredValue
p99
g3
NtRp100
(dp101
S'value_dict'
p102
ccollections
OrderedDict
p103
((lp104
(lp105
(F200.58083534240723
tp106
aI1
aa(lp107
(F1000.7679462432861
tp108
aI2
aa(lp109
(F2000.985860824585
tp110
aI3
aa(lp111
(F3000.7967948913574
tp112
aI4
aatRp113
sS'notify_value_set'
p114
Nsg20
g91
sS'num_dimensions'
p115
I1
sbsg45
(g1
(g95
g75
(S'millisecond'
p116
S'C26'
p117
S'ms'
p118
ttRp119
tp120
sbsS'level_all'
p121
g1
(g17
g3
NtRp122
(dp123
g20
g121
sg21
Nsg23
Nsg24
(lp124
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp125
(dp126
g42
I01
sg20
g121
sg43
I9
sbsg45
NsbsS'level_none'
p127
g1
(g17
g3
NtRp128
(dp129
g20
g127
sg21
Nsg23
Nsg24
(lp130
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp131
(dp132
g42
I01
sg20
g127
sg43
I0
sbsg45
NsbsS'level_some'
p133
g1
(g17
g3
NtRp134
(dp135
g20
g133
sg21
Nsg23
Nsg24
(lp136
sg34
Nsg35
g37
sg38
g1
(g39
g3
NtRp137
(dp138
g42
I01
sg20
g133
sg43
I8
sbsg45
Nsbssg72
I1469742455713
sg73
g1
(g74
g75
(g77
ttRp139
sg79
g1
(g80
g3
NtRp140
(dp141
g21
S'Test phase that sets a measurement.'
p142
sg20
S'set_measurements'
p143
sg85
S'    @openhtf.PhaseOptions(requires_state=True)\n    @plugs.plug(update_kwargs=False, **monitor_plugs)\n    @measurements.measures(\n        measurements.Measurement(measurement_name).WithUnits(\n            units).WithDimensions(uom.MILLISECOND))\n    @functools.wraps(phase_desc.func)\n    def MonitoredPhaseFunc(test_state, *args, **kwargs):\n      # Start monitor thread, it will run monitor_desc periodically.\n      monitor_thread = _MonitorThread(\n          measurement_name, monitor_desc, phase_desc.extra_kwargs, test_state,\n          poll_interval_ms)\n      monitor_thread.start()\n      try:\n        return phase_desc(test_state, *args, **kwargs)\n      finally:\n        monitor_thread.Kill()\n'
p144
sbsg20
g143
sbag1
(g8
g3
NtRp145
(dp146
g11
I1469742455715
sg12
(dp147
sg14
(dp148
S'lots_of_dims'
p149
g1
(g17
g3
NtRp150
(dp151
g20
g149
sg21
Nsg23
Nsg24
(lp152
sg34
Nsg35
g37
sg38
g1
(g99
g3
NtRp153
(dp154
g102
g103
((lp155
(lp156
(I1
I21
I101
tp157
aI123
aa(lp158
(I2
I22
I102
tp159
aI126
aa(lp160
(I3
I23
I103
tp161
aI129
aa(lp162
(I4
I24
I104
tp163
aI132
aatRp164
sg114
Nsg20
g149
sg115
I3
sbsg45
(g1
(g95
g75
(S'hertz'
p165
S'HTZ'
p166
S'Hz'
p167
ttRp168
g1
(g95
g75
(S'second [unit of time]'
p169
S'SEC'
p170
S's'
ttRp171
g1
(g95
g75
(S'radian'
p172
S'C81'
p173
S'rad'
p174
ttRp175
tp176
sbsS'unset_dims'
p177
g1
(g17
g3
NtRp178
(dp179
g20
g177
sg21
Nsg23
Nsg24
(lp180
sg34
Nsg35
g58
sg38
g1
(g99
g3
NtRp181
(dp182
g102
g103
((ltRp183
sg114
Nsg20
g177
sg115
I1
sbsg45
(g1
(g95
g75
(g165
g166
g167
ttRp184
tp185
sbsg45
g1
(g17
g3
NtRp186
(dp187
g20
g45
sg21
Nsg23
Nsg24
(lp188
sg34
Nsg35
g37
sg38
g1
(g99
g3
NtRp189
(dp190
g102
g103
((lp191
(lp192
(I0
tp193
aI1
aa(lp194
(I1
tp195
aI2
aa(lp196
(I2
tp197
aI4
aa(lp198
(I3
tp199
aI8
aa(lp200
(I4
tp201
aI16
aatRp202
sg114
Nsg20
g45
sg115
I1
sbsg45
(g1
(g95
g75
(g165
g166
g167
ttRp203
tp204
sbssg72
I1469742455716
sg73
g1
(g74
g75
(g77
ttRp205
sg79
g1
(g80
g3
NtRp206
(dp207
g21
Nsg20
g45
sg85
S"@measures(\n    Measurement('unset_dims').WithDimensions(units.HERTZ),\n    Measurement('dimensions').WithDimensions(units.HERTZ),\n    Measurement('lots_of_dims').WithDimensions(\n        units.HERTZ, units.SECOND, units.RADIAN))\ndef dimensions(test):\n  for dim in range(5):\n    test.measurements.dimensions[dim] = 1 << dim\n  for x, y, z in zip(range(1, 5), range(21, 25), range (101, 105)):\n    test.measurements.lots_of_dims[x, y, z] = x + y + z\n"
p208
sbsg20
g45
sbag1
(g8
g3
NtRp209
(dp210
g11
I1469742455716
sg12
(dp211
S'test_attachment'
p212
g1
(copenhtf.io.test_record
Attachment
p213
g75
(S'This is test attachment data.'
p214
NttRp215
sS'example_attachment.txt'
p216
g1
(g213
g75
(S'This is a text file attachment.\n'
p217
S'text/plain'
p218
ttRp219
ssg14
(dp220
sg72
I1469742455727
sg73
g1
(g74
g75
(g77
ttRp221
sg79
g1
(g80
g3
NtRp222
(dp223
g21
Nsg20
g12
sg85
S"def attachments(test):\n  test.attach('test_attachment', 'This is test attachment data.')\n  test.attach_from_file('example_attachment.txt')\n"
p224
sbsg20
g12
sbasg11
I1469742449615
sS'outcome_details'
p225
(lp226
sg72
I1469742455728
sS'station_id'
p227
S'jethier.mtv.corp.google.com'
p228
sS'dut_id'
p229
S'TestDUT'
p230
sS'code_info'
p231
g1
(g80
g3
NtRp232
(dp233
g21
S'Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py'
p234
sg20
S'all_the_things.py'
p235
sg85
S'# Copyright 2014 Google Inc. All Rights Reserved.\n\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n"""Example OpenHTF test logic.\n\nRun with (your virtualenv must be activated first):\npython all_the_things.py\n"""\n\nimport json\nimport os\nimport time\n\nimport example_plug\nimport openhtf\n\nfrom openhtf.io import output\nfrom openhtf.io.output import json_factory\nfrom openhtf.io.output import mfg_inspector\nfrom openhtf.names import *\n# Uncomment for mfg-inspector output, requires setup.py build_proto.\n#from openhtf.io.output import mfg_inspector\nfrom openhtf.util import units\n\n\n@plug(example=example_plug.ExamplePlug)\ndef example_monitor(example):\n  time.sleep(.2)\n  return example.Increment()\n'
p236
sbsS'log_records'
p237
(lp238
g1
(copenhtf.util.logs
LogRecord
p239
g75
(I20
S'openhtf.test_record.12224:1469742446488:140284887505104'
p240
S'all_the_things.py'
p241
I54
I1469742449618
VHello World!
p242
ttRp243
ag1
(g239
g75
(I20
g240
g241
I61
I1469742452641
VPlug value: 0
p244
ttRp245
ag1
(g239
g75
(I10
g240
S'test_state.py'
p246
I272
I1469742455727
VFinishing test execution normally with outcome FAIL.
p247
ttRp248
asg35
copenhtf.io.test_record
Outcome
p249
(I2
tRp250
sS'metadata'
p251
(dp252
S'test_name'
p253
S'MyTest'
p254
sS'config'
p255
(dp256
S'enable_station_discovery'
p257
I01
sS'station_api_port'
p258
I8888
sS'allow_unset_measurements'
p259
I00
sS'teardown_timeout_s'
p260
I3
sS'station_api_bind_address'
p261
S'0.0.0.0'
p262
sS'example_plug_increment'
p263
I1
sg227
g228
sS'station_discovery_string'
p264
S'OPENHTF_DISCOVERY'
p265
sS'max_history_size_mb'
p266
I256
ssS'test_version'
p267
S'1.0.0'
p268
sS'test_description'
p269
S'OpenHTF Example Test'
p270
ssb.