cmutablerecords.records
_UnReduceRecord
p1
(S'TestRecord'
p2
(cmutablerecords.records
RecordClass
p3
t(dp4
S'optional_attributes'
p5
(dp6
S'phases'
p7
c__builtin__
list
p8
sS'start_time_millis'
p9
copenhtf.util
TimeMillis
p10
sS'outcome_details'
p11
g8
sS'end_time_millis'
p12
NsS'code_info'
p13
NsS'log_records'
p14
g8
sS'outcome'
p15
NsS'metadata'
p16
c__builtin__
dict
p17
ssS'required_attributes'
p18
(S'dut_id'
p19
S'station_id'
p20
tp21
s(S'TestDUT'
p22
S'measurements_test'
p23
ttRp24
(dp25
g7
(lp26
g1
(S'PhaseRecord'
p27
(g3
t(dp28
g5
(dp29
g9
NsS'attachments'
p30
g17
sS'measured_values'
p31
NsS'measurements'
p32
NsS'docstring'
p33
Nsg12
NsS'result'
p34
Nssg18
(S'name'
p35
S'codeinfo'
p36
tp37
s(S'HelloPhase'
p38
g1
(S'CodeInfo'
p39
(g3
t(dp40
g5
(dp41
sg18
(g35
g33
S'sourcecode'
p42
tp43
s(g38
NS"@measures(Measurement('hello_world_measurement'))\ndef HelloPhase(test):\n  test.measurements.hello_world_measurement = 'Hello!'\n"
p44
ttRp45
(dbttRp46
(dp47
g9
I1460688867348
sg30
(dp48
sg31
(dp49
S'hello_world_measurement'
p50
S'Hello!'
p51
ssg32
(dp52
g50
g1
(S'Measurement'
p53
(g3
t(dp54
g5
(dp55
S'units'
p56
Nsg15
copenhtf.util.measurements
Outcome
p57
(I3
tRp58
sg33
NsS'dimensions'
p59
NsS'validators'
p60
g8
ssg18
(g35
tp61
s(g50
ttRp62
(dp63
g56
Nsg15
g57
(I1
tRp64
sg33
Nsg59
Nsg60
(lp65
sbssg33
Nsg12
I1460688867350
sg34
ccopy_reg
_reconstructor
p66
(copenhtf.exe.phase_executor
PhaseOutcome
p67
c__builtin__
tuple
p68
(copenhtf
PhaseResult
p69
(S'PHASE_CONTINUE'
p70
tRp71
ttRp72
sbag1
(g27
(g3
t(dp73
g5
g29
sg18
g37
s(S'AgainPhase'
p74
g1
(g39
(g3
t(dp75
g5
g41
sg18
g43
s(g74
NS"@measures('hello_again_measurement')\ndef AgainPhase(test):\n  test.measurements.hello_again_measurement = 'Again!'\n"
p76
ttRp77
(dbttRp78
(dp79
g9
I1460688867350
sg30
(dp80
sg31
(dp81
S'hello_again_measurement'
p82
S'Again!'
p83
ssg32
(dp84
g82
g1
(g53
(g3
t(dp85
g5
g55
sg18
g61
s(g82
ttRp86
(dp87
g56
Nsg15
g64
sg33
Nsg59
Nsg60
(lp88
sbssg33
Nsg12
I1460688867350
sg34
g66
(g67
g68
(g71
ttRp89
sbag1
(g27
(g3
t(dp90
g5
g29
sg18
g37
s(S'LotsOfMeasurements'
p91
g1
(g39
(g3
t(dp92
g5
g41
sg18
g43
s(g91
NS"@measures('first_measurement', 'second_measurement')\n@measures(Measurement('third'), Measurement('fourth'))\ndef LotsOfMeasurements(test):\n  test.measurements.first_measurement = 'First!'\n  test.measurements['second_measurement'] = 'Second :('\n  for measurement in ('third', 'fourth'):\n    test.measurements[measurement] = measurement + ' is the best!'\n"
p93
ttRp94
(dbttRp95
(dp96
g9
I1460688867350
sg30
(dp97
sg31
(dp98
S'first_measurement'
p99
S'First!'
p100
sS'third'
p101
S'third is the best!'
p102
sS'fourth'
p103
S'fourth is the best!'
p104
sS'second_measurement'
p105
S'Second :('
p106
ssg32
(dp107
g99
g1
(g53
(g3
t(dp108
g5
g55
sg18
g61
s(g99
ttRp109
(dp110
g56
Nsg15
g64
sg33
Nsg59
Nsg60
(lp111
sbsg101
g1
(g53
(g3
t(dp112
g5
g55
sg18
g61
s(g101
ttRp113
(dp114
g56
Nsg15
g64
sg33
Nsg59
Nsg60
(lp115
sbsg103
g1
(g53
(g3
t(dp116
g5
g55
sg18
g61
s(g103
ttRp117
(dp118
g56
Nsg15
g64
sg33
Nsg59
Nsg60
(lp119
sbsg105
g1
(g53
(g3
t(dp120
g5
g55
sg18
g61
s(g105
ttRp121
(dp122
g56
Nsg15
g64
sg33
Nsg59
Nsg60
(lp123
sbssg33
Nsg12
I1460688867351
sg34
g66
(g67
g68
(g71
ttRp124
sbag1
(g27
(g3
t(dp125
g5
g29
sg18
g37
s(S'MeasureSeconds'
p126
g1
(g39
(g3
t(dp127
g5
g41
sg18
g43
s(g126
NS"@measures(Measurement('validated_measurement').InRange(0, 10).Doc(\n    'This measurement is validated.').WithUnits(UOM['SECOND']))\ndef MeasureSeconds(test):\n  test.measurements.validated_measurement = 5\n"
p128
ttRp129
(dbttRp130
(dp131
g9
I1460688867351
sg30
(dp132
sg31
(dp133
S'validated_measurement'
p134
I5
ssg32
(dp135
g134
g1
(g53
(g3
t(dp136
g5
g55
sg18
g61
s(g134
ttRp137
(dp138
g56
g66
(copenhtf.util.units
Unit
p139
g68
(S'SEC'
p140
S's'
ttRp141
sg15
g64
sg33
S'This measurement is validated.'
p142
sg59
Nsg60
(lp143
g66
(copenhtf.util.validators
InRange
p144
c__builtin__
object
p145
NtRp146
(dp147
S'minimum'
p148
I0
sS'maximum'
p149
I10
sbasbssg33
Nsg12
I1460688867351
sg34
g66
(g67
g68
(g71
ttRp150
sbag1
(g27
(g3
t(dp151
g5
g29
sg18
g37
s(S'InlinePhase'
p152
g1
(g39
(g3
t(dp153
g5
g41
sg18
g43
s(g152
NS"@measures('inline_kwargs', docstring='This measurement is declared inline!',\n          units=UOM['HERTZ'], validators=[util.validators.InRange(0, 10)])\n@measures('another_inline', docstring='Because why not?')\ndef InlinePhase(test):\n  test.measurements.inline_kwargs = 15\n  test.measurements.another_inline = 'This one is unvalidated.'\n"
p154
ttRp155
(dbttRp156
(dp157
g9
I1460688867352
sg30
(dp158
sg31
(dp159
S'inline_kwargs'
p160
I15
sS'another_inline'
p161
S'This one is unvalidated.'
p162
ssg32
(dp163
g160
g1
(g53
(g3
t(dp164
g5
g55
sg18
g61
s(g160
ttRp165
(dp166
g56
g66
(g139
g68
(S'HTZ'
p167
S'Hz'
p168
ttRp169
sg15
g57
(I2
tRp170
sg33
S'This measurement is declared inline!'
p171
sg59
Nsg60
(lp172
g66
(g144
g145
NtRp173
(dp174
g148
I0
sg149
I10
sbasbsg161
g1
(g53
(g3
t(dp175
g5
g55
sg18
g61
s(g161
ttRp176
(dp177
g56
Nsg15
g64
sg33
S'Because why not?'
p178
sg59
Nsg60
(lp179
sbssg33
Nsg12
I1460688867352
sg34
g66
(g67
g68
(g71
ttRp180
sbasg9
I1460688867348
sg11
(lp181
sg12
I1460688867352
sg13
g1
(g39
(g3
t(dp182
g5
g41
sg18
g43
s(S'measurements_test.py'
p183
NS"  def testMeasurements(self):\n    result = util.NonLocalResult() \n    def _SaveResult(test_record):\n      result.result = test_record\n    test = Test(HelloPhase, AgainPhase, LotsOfMeasurements, MeasureSeconds,\n                InlinePhase)\n    # Uncomment this line when you need to update the expected output.\n    test.AddOutputCallback(self._PickleRecord)\n    #test.AddOutputCallback(_SaveResult)\n    test.Execute(test_start=lambda: 'TestDUT')\n"
p184
ttRp185
(dbsg14
(lp186
g66
(copenhtf.io.test_record
LogRecord
p187
g68
(I10
S'openhtf.test_record'
p188
S'test_state.py'
p189
I149
I1460688867352
VFinishing test execution with outcome FAIL.
p190
ttRp191
asg15
copenhtf.io.test_record
Outcome
p192
(I2
tRp193
sg16
(dp194
sb.